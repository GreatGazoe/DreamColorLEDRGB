<?xml version="1.0"?>
<!-- 
****************************************************************
*       *DreamColor PlugIn for MicasaVerde Vera (Lua)*         *
*                                                              *  
* Plugin for controlling the H806SB WiFi RGBLED-Controller.    *
* With this plugin it's possible to control individually       * 
* adressable LED-strips such as WS-2811, WS-2812, WS-2812b.    *
* It's possible to choose different .dat files on the SDCard,  *
* adjust the speed of the effects and choose Single-File or    *
* Loop-File modus. The use of the RGB-Color pallet is also     *
* implemented, but it's limited to 340 LEDs.(that's about      *
* 5,5 meter(!) if we are talking about a strip with 60 leds/m) *
* Controller uses triple HEX-code, so colors are limited.      *
*                                                              *
* Created by GreatGazoo, enjoy !!                              *
*                                                              *
**************************************************************** 
-->
<implementation>
  <settings>
    <protocol>crlf</protocol>
  </settings>
  <functions>
    ipaddr = ""
	ipport = ""
	busy = false
    luup.variable_set("urn:ggfiplupro-com:serviceId:DreamColorRGBW1", "SingleFile", 01, lul_device)
	
	function getIP(lul_dev)
        local ip = luup.attr_get("ip", lul_dev)
		ip = string.gsub(ip," ","")
		ipaddr, ipport = string.match(ip,"(%d+%.%d+%.%d+%.%d+)%:?(%d*)")
			if (ipport == nil) or (#ipport == 0) or (ipport == undefined) then
			ipport = 4626
			luup.log("DreamColorRGBW1: Port not specified, " .. ipport .. " assumed.")
		end
		if (ipaddr == nil) or (#ipaddr == 0) or (ipaddr == undefined) then
			luup.task("Invalid ip address:(default *controlleripaddres*:4626)" .. ip, 2, "DreamColorRGBW1", -1)
			luup.log("DreamColorRGBW: ip address/port not set")
			return false
		else 
			luup.attr_set("ip",ipaddr .. ":" .. ipport,lul_dev)
			luup.variable_set("urn:micasaverde-com:serviceId:HaDevice1", "CommFailure", 0, lul_dev)
			return true
		end
	end
	
    function SessionVariable(SessionVariable)
		local SessionVariable = math.random(1,99)
		SessionVariable1 = (SessionVariable - math.floor(SessionVariable/256)*256)
		local SessionVariablechar = string.char(SessionVariable1)
		return SessionVariablechar
	end
	
	function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789abcdef","",0
    while IN>0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
		end
		return OUT
	end
  
  </functions>
  <startup>getIP</startup>
  <actionList>
    <action>
      <serviceId>urn:upnp-org:serviceId:Dimming1</serviceId>
      <name>SetLoadLevelTarget</name>
      <job>
	    if busy then luup.sleep(100) end
		busy = true
		luup.variable_set("urn:upnp-org:serviceId:Dimming1", "LoadLevelTarget", lul_settings.newLoadlevelTarget, lul_device)
		local level = luup.variable_get("urn:upnp-org:serviceId:Dimming1", "LoadLevelTarget", lul_device)
		luup.variable_set("urn:upnp-org:serviceId:Dimming1", "LoadLevelStatus", level, lul_device)
		if level == "0" then
				luup.variable_set("urn:upnp-org:serviceId:SwitchPower1", "Status", 0, lul_device)
				luup.variable_set("urn:upnp-org:serviceId:Dimming1", "IconState", 0, lul_device)
				local setColorfront = string.char(0xfb,0xc2)
				local setColormiddle = string.char(0x00)
				local setColormiddle1 = string.char(0x01)
				local setColormiddle2 = string.char(0x02)
				local setColorend = string.char(0x00,0x08,0xec,0x41,0x00)
				local rgbreset = string.char(0x00,0x00,0x00)
				local rgbreset1 = rgbreset..rgbreset..rgbreset..rgbreset..rgbreset
				local rgbreset2 = rgbreset1..rgbreset1..rgbreset1..rgbreset1..rgbreset1
				local rgbreset3 = rgbreset2..rgbreset2..rgbreset2..rgbreset2
				local rgbresetchar = rgbreset3..rgbreset3..rgbreset3..rgbreset2..rgbreset1..rgbreset1..rgbreset1..rgbreset
				local SessionVariablechar = SessionVariable(SessionVariable)
				local resetColorcommand = setColorfront..SessionVariablechar..setColormiddle..rgbresetchar..setColorend	
				local SessionVariablechar = SessionVariable(SessionVariable)
				local resetColorcommand1 = setColorfront..SessionVariablechar..setColormiddle1..rgbresetchar..setColorend
				local SessionVariablechar = SessionVariable(SessionVariable)
				local resetColorcommand2 = setColorfront..SessionVariablechar..setColormiddle2..rgbresetchar..setColorend
				luup.variable_set("urn:ggfiplupro-com:serviceId:DreamColorRGBW1", "ColorRGB", 0, lul_device)
				socket = require("socket")
				local s = socket.udp()
				s:sendto(resetColorcommand, ipaddr, ipport)
				luup.sleep(100)
				s:sendto(resetColorcommand1, ipaddr, ipport)
				luup.sleep(100)
				s:sendto(resetColorcommand2, ipaddr, ipport)
				luup.sleep(100)
				s:sendto(resetColorcommand, ipaddr, ipport)
				luup.sleep(100)
				s:sendto(resetColorcommand1, ipaddr, ipport)
				luup.sleep(100)
				s:sendto(resetColorcommand2, ipaddr, ipport)
				s:close()
				luup.sleep(oICT)
				busy = false
				return 4,nil
			else
				luup.variable_set("urn:upnp-org:serviceId:SwitchPower1", "Status", 1, lul_device)
				luup.variable_set("urn:upnp-org:serviceId:Dimming1", "IconState", level, lul_device)
		end
		local ColorRGB = luup.variable_get("urn:ggfiplupro-com:serviceId:DreamColorRGBW1", "ColorRGB", lul_device)
		if ColorRGB == "1" then 
			luup.call_action("urn:micasaverde-com:serviceId:Color1", "SetColorRGB", CurrentColor, lul_device)
			busy = false
			return 4,nil
		end
		local DimmerFront = string.char(0xfb,0xc1)
		local DimmerEnd = string.char(0x00,0xb8,0x0b,0x00,0x00,0x00,0x08,0xec,0x41,0x00)
		local DimmerCommand = luup.variable_get("urn:upnp-org:serviceId:Dimming1", "LoadLevelStatus", lul_dev)
		local DimmerCommand1 = math.floor(DimmerCommand / 3.33)
		DimmerCommand2 = (DimmerCommand1 - math.floor(DimmerCommand1/256)*256)
		local DimmerCommandchar = string.char(DimmerCommand2)
		local SingleFile = luup.variable_get("urn:ggfiplupro-com:serviceId:DreamColorRGBW1", "SingleFile", lul_dev)
		SingleFile = (SingleFile - math.floor(SingleFile/256)*256)
		local SingleFilechar = string.char(SingleFile)
	    local SessionVariablechar = SessionVariable(SessionVariable)
		local SpeedCommand = luup.variable_get("urn:ggfiplupro-com:serviceId:DreamColorRGBW1", "SpeedStatus", lul_dev)
		SpeedCommand = (SpeedCommand - math.floor(SpeedCommand/256)*256)
		local SpeedCommandchar = string.char(SpeedCommand)
		local Dimmer = DimmerFront..SessionVariablechar..SpeedCommandchar..DimmerCommandchar..SingleFilechar..DimmerEnd
		luup.variable_set("urn:ggfiplupro-com:serviceId:DreamColorRGBW1", "ColorRGB", 0, lul_device)
		socket = require("socket")
		local s = socket.udp()
		s:sendto(Dimmer, ipaddr, ipport)
		luup.sleep(100)
		s:sendto(Dimmer, ipaddr, ipport)
		s:close()
		luup.sleep(oICT)
		busy = false
		return 4,nil
	    </job>
    </action>
    
	<action>
      <serviceId>urn:upnp-org:serviceId:SwitchPower1</serviceId>
      <name>SetTarget</name>
      <job>
		if busy then luup.sleep(100) end
		busy = true
		luup.variable_set("urn:upnp-org:serviceId:SwitchPower1", "Target", lul_settings.newTargetValue, lul_device)
		local Target = luup.variable_get("urn:upnp-org:serviceId:SwitchPower1", "Target", lul_device)
		luup.variable_set("urn:upnp-org:serviceId:SwitchPower1", "Status", lul_settings.newTargetValue, lul_device)
		if Target == "0" then
			luup.call_action("urn:upnp-org:serviceId:Dimming1", "SetLoadLevelTarget", {["newLoadlevelTarget"] = "0"}, lul_device)
			busy = false
			return 4,nil
		else
		    luup.call_action("urn:upnp-org:serviceId:Dimming1", "SetLoadLevelTarget", {["newLoadlevelTarget"] = "40"}, lul_device)
		end
		busy = false
		return 4,nil
		</job>
    </action>
	
	<action>
      <serviceId>urn:ggfiplupro-com:serviceId:DreamColorRGBW1</serviceId>
      <name>SetSpeedTarget</name>
      <job>
	    if busy then luup.sleep(100) end
		busy = true
	    luup.variable_set("urn:ggfiplupro-com:serviceId:DreamColorRGBW1", "SpeedTarget", lul_settings.newSpeedTarget, lul_device)
		local speed = luup.variable_get("urn:ggfiplupro-com:serviceId:DreamColorRGBW1", "SpeedTarget", lul_device)
		luup.variable_set("urn:ggfiplupro-com:serviceId:DreamColorRGBW1", "SpeedStatus", speed, lul_device)
		local SpeedFront = string.char(0xfb,0xc1)
		local SpeedEnd = string.char(0x00,0xb8,0x0b,0x00,0x00,0x00,0x08,0xec,0x41,0x00)
		local SpeedCommand = luup.variable_get("urn:ggfiplupro-com:serviceId:DreamColorRGBW1", "SpeedStatus", lul_dev)
		SpeedCommand = (SpeedCommand - math.floor(SpeedCommand/256)*256)
		local SpeedCommandchar = string.char(SpeedCommand)
		local SingleFile = luup.variable_get("urn:ggfiplupro-com:serviceId:DreamColorRGBW1", "SingleFile", lul_dev)
		SingleFile = (SingleFile - math.floor(SingleFile/256)*256)
		local SingleFilechar = string.char(SingleFile)
		local SessionVariablechar = SessionVariable(SessionVariable)
		local DimmerCommand = luup.variable_get("urn:upnp-org:serviceId:Dimming1", "LoadLevelStatus", lul_dev)
		local DimmerCommand1 = math.floor(DimmerCommand / 3.33)
		DimmerCommand2 = (DimmerCommand1 - math.floor(DimmerCommand1/256)*256)
		local DimmerCommandchar = string.char(DimmerCommand2)
		local Speed = SpeedFront..SessionVariablechar..SpeedCommandchar..DimmerCommandchar..SingleFilechar..SpeedEnd
		luup.variable_set("urn:ggfiplupro-com:serviceId:DreamColorRGBW1", "ColorRGB", 0, lul_device)
		socket = require("socket")
		local s = socket.udp()
		s:sendto(Speed, ipaddr, ipport)
		luup.sleep(100)
		s:sendto(Speed, ipaddr, ipport)
		s:close()
		luup.sleep(oICT)
		busy = false
		return 4,nil
	    </job>
    </action>
	
	<action>
      <serviceId>urn:ggfiplupro-com:serviceId:DreamColorRGBW1</serviceId>
      <name>SetFileSelect</name>
      <job>
		if busy then luup.sleep(100) end
		busy = true
	    luup.variable_set("urn:ggfiplupro-com:serviceId:DreamColorRGBW1", "FileSelect", lul_settings.newFileSelect, lul_device)
		local FileSelectFront = string.char(0xfb,0xc5)
		local FileSelectEnd = string.char(0x08,0xec,0x41,0x00)
		local SessionVariablechar = SessionVariable(SessionVariable)
		local FileSelectCommand = luup.variable_get("urn:ggfiplupro-com:serviceId:DreamColorRGBW1", "FileSelect", lul_dev)
		FileSelectCommand = (FileSelectCommand - math.floor(FileSelectCommand/256)*256)
		local FileSelectCommandchar = string.char(FileSelectCommand)
		local FileSelect = FileSelectFront..SessionVariablechar..FileSelectCommandchar..FileSelectEnd
		luup.variable_set("urn:ggfiplupro-com:serviceId:DreamColorRGBW1", "ColorRGB", 0, lul_device)
		socket = require("socket")
		local s = socket.udp()
		s:sendto(FileSelect, ipaddr, ipport)
		luup.sleep(100)
		s:sendto(FileSelect, ipaddr, ipport)
		s:close()
		luup.sleep(oICT)
		busy = false
		return 4,nil
	  </job>
    </action>
	
	<action>
      <serviceId>urn:ggfiplupro-com:serviceId:DreamColorRGBW1</serviceId>
      <name>SetSingleFile</name>
      <job>
	    if busy then luup.sleep(100) end
		busy = true
		local DimmerFront = string.char(0xfb,0xc1)
		local DimmerEnd = string.char(0x00,0xb8,0x0b,0x00,0x00,0x00,0x08,0xec,0x41,0x00)
		local DimmerCommand = luup.variable_get("urn:upnp-org:serviceId:Dimming1", "LoadLevelStatus", lul_dev)
		local DimmerCommand1 = math.floor(DimmerCommand / 3.33)
		DimmerCommand2 = (DimmerCommand1 - math.floor(DimmerCommand1/256)*256)
		local DimmerCommandchar = string.char(DimmerCommand2)
		local SingleFile = 01
		local SingleFilechar = string.char(SingleFile)
		luup.variable_set("urn:ggfiplupro-com:serviceId:DreamColorRGBW1", "SingleFile", 01, lul_device)
		local SessionVariablechar = SessionVariable(SessionVariable)
		local SpeedCommand = luup.variable_get("urn:ggfiplupro-com:serviceId:DreamColorRGBW1", "SpeedStatus", lul_dev)
		SpeedCommand = (SpeedCommand - math.floor(SpeedCommand/256)*256)
		local SpeedCommandchar = string.char(SpeedCommand)
		local Dimmer = DimmerFront..SessionVariablechar..SpeedCommandchar..DimmerCommandchar..SingleFilechar..DimmerEnd
		luup.variable_set("urn:ggfiplupro-com:serviceId:DreamColorRGBW1", "ColorRGB", 0, lul_device)
		socket = require("socket")
		local s = socket.udp()
		s:sendto(Dimmer, ipaddr, ipport)
		luup.sleep(100)
		s:sendto(Dimmer, ipaddr, ipport)
		s:close()
		luup.sleep(oICT)
		busy = false
		return 4,nil
	  </job>
    </action>
	
	<action>
      <serviceId>urn:ggfiplupro-com:serviceId:DreamColorRGBW1</serviceId>
      <name>SetLoopFile</name>
      <job>
	    if busy then luup.sleep(100) end
		busy = true
		local DimmerFront = string.char(0xfb,0xc1)
		local DimmerEnd = string.char(0x00,0xb8,0x0b,0x00,0x00,0x00,0x08,0xec,0x41,0x00)
		local DimmerCommand = luup.variable_get("urn:upnp-org:serviceId:Dimming1", "LoadLevelStatus", lul_dev)
		local DimmerCommand1 = math.floor(DimmerCommand / 3.33)
		DimmerCommand2 = (DimmerCommand1 - math.floor(DimmerCommand1/256)*256)
		local DimmerCommandchar = string.char(DimmerCommand2)
		local SingleFile = 00
		local SingleFilechar = string.char(SingleFile)
		luup.variable_set("urn:ggfiplupro-com:serviceId:DreamColorRGBW1", "SingleFile", 00, lul_device)
		local SessionVariablechar = SessionVariable(SessionVariable)
		local SpeedCommand = luup.variable_get("urn:ggfiplupro-com:serviceId:DreamColorRGBW1", "SpeedStatus", lul_dev)
		SpeedCommand = (SpeedCommand - math.floor(SpeedCommand/256)*256)
		local SpeedCommandchar = string.char(SpeedCommand)
		local Dimmer = DimmerFront..SessionVariablechar..SpeedCommandchar..DimmerCommandchar..SingleFilechar..DimmerEnd
		luup.variable_set("urn:ggfiplupro-com:serviceId:DreamColorRGBW1", "ColorRGB", 0, lul_device)
		socket = require("socket")
		local s = socket.udp()
		s:sendto(Dimmer, ipaddr, ipport)
		luup.sleep(100)
		s:sendto(Dimmer, ipaddr, ipport)
		s:close()
		luup.sleep(oICT)
		busy = false
		return 4,nil
	  </job>
    </action>
	
	<action>
      <serviceId>urn:micasaverde-com:serviceId:Color1</serviceId>
      <name>SetColorRGB</name>
       <job>
	    if busy then luup.sleep(100) end
		busy = true
		luup.variable_set("urn:micasaverde-com:serviceId:Color1", "ColorRGBTarget", lul_settings.newColorRGBTarget, lul_device)
		luup.variable_set("urn:micasaverde-com:serviceId:Color1", "CurrentColor", lul_settings.newColorRGBTarget, lul_device)
		local setColorfront = string.char(0xfb,0xc2)
		local setColormiddle = string.char(0x00)
		local setColormiddle1 = string.char(0x01)
		local setColormiddle2 = string.char(0x02)
		local setColorend = string.char(0x00,0x08,0xec,0x41,0x00)
		local DimmerCommand = luup.variable_get("urn:upnp-org:serviceId:Dimming1", "LoadLevelStatus", lul_dev)
		local DimmerCommand1 = math.floor(DimmerCommand / 6.25)
		DimmerCommand2 = DEC_HEX(DimmerCommand1)
		if DimmerCommand == 100 then DimmerCommand2 = e end
		local color = luup.variable_get("urn:micasaverde-com:serviceId:Color1", "CurrentColor", lul_device)
		string = color
		r, g, b = string:match("([^,]+),([^,]+),([^,]+)")
		local r1 = math.floor(r/g)
		local r2 = math.floor(r/b)
		local g1 = math.floor(g/r)
		local g2 = math.floor(g/b)
		local b1 = math.floor(b/r)
		local b2 = math.floor(b/g)
		if r1 > 0 and r2 > 0 then r1 = 1 else r1 = 0 end
		if g1 > 0 and g2 > 0 then g1 = 1 else g1 = 0 end
		if b1 > 0 and b2 > 0 then b1 = 1 else b1 = 0 end
	    local r = math.floor(r/16)
		local r = DEC_HEX(r)
		if r1 == 1 then rhex = ("0x"..DimmerCommand2..r) else rhex = ("0x0"..r) end
		local g = math.floor(g/16)
		local g = DEC_HEX(g)
		if g1 == 1 then ghex = ("0x"..DimmerCommand2..g) else ghex = ("0x0"..g) end
		local b = math.floor(b/16)
		local b = DEC_HEX(b)
	    if b1 == 1 then bhex = ("0x"..DimmerCommand2..b) else bhex = ("0x0"..b) end
	    local rgbhex = string.char(ghex, rhex, bhex)
		local rgbhex1 = rgbhex..rgbhex..rgbhex..rgbhex..rgbhex
		local rgbhex2 = rgbhex1..rgbhex1..rgbhex1..rgbhex1..rgbhex1
		local rgbhex3 = rgbhex2..rgbhex2..rgbhex2..rgbhex2
		local rgbhexchar = rgbhex3..rgbhex3..rgbhex3..rgbhex2..rgbhex1..rgbhex1..rgbhex1..rgbhex
        local SessionVariablechar = SessionVariable(SessionVariable)
		local setColorcommand = setColorfront..SessionVariablechar..setColormiddle..rgbhexchar..setColorend	
        local SessionVariablechar = SessionVariable(SessionVariable)
		local setColorcommand1 = setColorfront..SessionVariablechar..setColormiddle1..rgbhexchar..setColorend
		local SessionVariablechar = SessionVariable(SessionVariable)
		local setColorcommand2 = setColorfront..SessionVariablechar..setColormiddle2..rgbhexchar..setColorend
		local rgbreset = string.char(0x00,0x00,0x00)
		local rgbreset1 = rgbreset..rgbreset..rgbreset..rgbreset..rgbreset
		local rgbreset2 = rgbreset1..rgbreset1..rgbreset1..rgbreset1..rgbreset1
		local rgbreset3 = rgbreset2..rgbreset2..rgbreset2..rgbreset2
		local rgbresetchar = rgbreset3..rgbreset3..rgbreset3..rgbreset2..rgbreset1..rgbreset1..rgbreset1..rgbreset
	    local SessionVariablechar = SessionVariable(SessionVariable)
		local resetColorcommand = setColorfront..SessionVariablechar..setColormiddle..rgbresetchar..setColorend	
        local SessionVariablechar = SessionVariable(SessionVariable)
		local resetColorcommand1 = setColorfront..SessionVariablechar..setColormiddle1..rgbresetchar..setColorend
		local SessionVariablechar = SessionVariable(SessionVariable)
		local resetColorcommand2 = setColorfront..SessionVariablechar..setColormiddle2..rgbresetchar..setColorend
		luup.variable_set("urn:ggfiplupro-com:serviceId:DreamColorRGBW1", "ColorRGB", 1, lul_device)
		socket = require("socket")
		local s = socket.udp()
		s:sendto(resetColorcommand, ipaddr, ipport)
		luup.sleep(100)
		s:sendto(resetColorcommand1, ipaddr, ipport)
		luup.sleep(100)
		s:sendto(resetColorcommand2, ipaddr, ipport)
		luup.sleep(100)
		s:sendto(resetColorcommand, ipaddr, ipport)
		luup.sleep(100)
		s:sendto(resetColorcommand1, ipaddr, ipport)
		luup.sleep(100)
		s:sendto(resetColorcommand2, ipaddr, ipport)
		luup.sleep(100)
		s:sendto(setColorcommand, ipaddr, ipport)
		luup.sleep(100)
		s:sendto(setColorcommand1, ipaddr, ipport)
		luup.sleep(100)
		s:sendto(setColorcommand2, ipaddr, ipport)
		luup.sleep(100)
		s:sendto(setColorcommand, ipaddr, ipport)
		luup.sleep(100)
		s:sendto(setColorcommand1, ipaddr, ipport)
		luup.sleep(100)
		s:sendto(setColorcommand2, ipaddr, ipport)
		s:close()
		luup.sleep(oICT)
		busy = false
		return 4,nil
	   </job>
    </action>
	</actionList>
</implementation>
